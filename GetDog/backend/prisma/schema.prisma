// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  name     String
  email    String
  password String
  address  String
  typeUser TypeUser

  created_at DateTime? @default(now()) @map("created_at")
  updated_at DateTime? @default(now()) @map("updated_at")

  profile   Profile?
  profileId String?  @map("profile_id")

  posts               Post[]
  comments            Comment[]
  conversations       Conversation[]
  dogWalkReservations DogWalkReservation[]

  @@map("users")
}

model Profile {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  gender         String?
  biography      String?
  profilePicture String? @map("profile_picture")
  coverPhoto     String? @map("cover_photo")

  followers Follower[]

  created_at DateTime? @default(now()) @map("created_at")
  updated_at DateTime? @default(now()) @map("updated_at")

  @@map("profiles")
}

model Follower {
  id                 String    @id @default(uuid())
  name               String
  followingStartDate DateTime? @default(now()) @map("following_start_date")
  profileId          String?

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @map("updated_at")

  profiles Profile[]

  @@map("followers")
}

model Post {
  id            String     @id @default(uuid())
  title         String
  legend        String
  disponibility DateTime[]
  address       String
  likes         Int?       @default(0)
  unlikes       Int?       @default(0)

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @map("updated_at")

  photos              String[]
  comments            Comment[]
  dogWalkReservations DogWalkReservation[]

  author   User   @relation(fields: [authorId], references: [id],  onDelete: Cascade)
  authorId String

  @@map("posts")
}


model Comment {
  id      String @id @default(uuid())
  text    String
  likes   Int?   @default(0)
  unlikes Int?   @default(0)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @map("updated_at")

  @@map("comments")
}

model Message {
  id   String @id @default(uuid())
  text String

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @map("updated_at")

  @@map("messages")
}

model Conversation {
  id       String    @id @default(uuid())
  messages Message[]
  users    User[]

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @map("updated_at")

  @@map("conversations")
}

model DogWalkReservation {
  id                       String                   @id @default(uuid())
  appointment              DateTime
  statusDogWalkReservation StatusDogWalkReservation @default(AWAITING_CONFIRMATION)
  address                  String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  tour   Tour?
  tourId String?
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @map("updated_at")
}

model Tour {
  id               String                   @id @default(uuid())
  status           TourStatus               @default(CANCELED)

  dogWalkReservation DogWalkReservation     @relation(fields: [dogWalkReservationId], references: [id])
  dogWalkReservationId String @unique

  createdAt        DateTime?                @default(now()) @map("created_at")
  updatedAt        DateTime?                @default(now()) @map("updated_at")

  @@map("tours")
}

enum TourStatus {
  SCHEDULED
  CONCLUDED
  IN_PROGRESS
  CANCELED
}

enum StatusDogWalkReservation {
  AWAITING_CONFIRMATION
  DECLINED
  ACCEPTED
  CANCELED
}

enum TypeUser {
  DOG_WALK
  DOG_OWNER
}
